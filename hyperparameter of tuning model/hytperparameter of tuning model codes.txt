import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load dataset
data = load_iris()
X = data.data
y = data.target

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Define the model
model = RandomForestClassifier(random_state=42)

# Define the parameter grid for Grid Search
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# Initialize GridSearchCV
grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)

# Fit the model using Grid Search
grid_search.fit(X_train, y_train)

# Print best parameters and score from Grid Search
print("Grid Search Best parameters found: ", grid_search.best_params_)
print("Grid Search Best cross-validation score: ", grid_search.best_score_)

# Evaluate the model from Grid Search
best_model_grid = grid_search.best_estimator_
y_pred_grid = best_model_grid.predict(X_test)
print("Grid Search Test set accuracy: ", accuracy_score(y_test, y_pred_grid))

# Define the parameter distribution for Random Search
param_dist = {
    'n_estimators': np.arange(50, 201, 50),
    'max_depth': [None] + list(np.arange(10, 31, 10)),
    'min_samples_split': np.arange(2, 11, 3),
    'min_samples_leaf': np.arange(1, 5)
}

# Initialize RandomizedSearchCV
random_search = RandomizedSearchCV(estimator=model, param_distributions=param_dist, n_iter=50, cv=5, n_jobs=-1, verbose=2, random_state=42)

# Fit the model using Random Search
random_search.fit(X_train, y_train)

# Print best parameters and score from Random Search
print("Random Search Best parameters found: ", random_search.best_params_)
print("Random Search Best cross-validation score: ", random_search.best_score_)

# Evaluate the model from Random Search
best_model_random = random_search.best_estimator_
y_pred_random = best_model_random.predict(X_test)
print("Random Search Test set accuracy: ", accuracy_score(y_test, y_pred_random))